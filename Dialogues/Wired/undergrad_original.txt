<b>B:</b>I'm Sunny.<br>
<b>A:</b>[Hilary] And what are you majoring in?<br>
<b>B:</b>I study Math and Computer Science.<br>
<b>A:</b>So in your studies, have you learned about machine learning?<br>
<b>B:</b>Yeah, I have. So to me, machine learning is essentially exactly what it sounds like. It's trying to teach a machine specifics about something by inputting a lot of data points and slowly, the machine will build up knowledge about it over time. For example, my Gmail program, I assume that there would be a lot of, like, machine learning models happening at once, right?<br>
<b>A:</b>Absolutely. And that's a great example because you have models that are operating to do things like figure out if a new email is spam or not. So what would you think about if you were looking at an email and trying to decide if it went in one category or another?<br>
<b>B:</b>I'd probably look at certain keywords. Maybe if the recipient and the sender had exchanged emails before and generally, those fell into in the past.<br>
<b>A:</b>So these are things we would call features. And we go through a process where we do feature engineering, where somebody looks at the example and says, Okay, these are the things that I think might allow us to statistically tell the difference from something in one category versus another. So for example, perhaps you don't speak Russian, you start getting a lot of email in Russian.<br>
<b>B:</b>Obviously, like the features that you just described are features which a person would have had to think about. Are there features which, like, the machine itself could learn?<br>
<b>A:</b>This is a great question because it really gets to the difference between some of our different tools in our machine learning tool belt in addressing problems like this. So if we were to use a supervised learning classic classification approach, a person would need to think about those features and creatively come up with them in approach we call the kitchen sink approach, which is just try everything you can possibly think of and see what works. Unsupervised learning, where we don't have labeled data and we're trying to infer some structure out of the data is you're projecting that data into a space and looking for things like clusters. And there's a bunch of really fun math about how you do that, how you think about distance and by distance, I mean that if we have two data points in space, how do we decide if they're similar or not?<br>
<b>B:</b>And how do the algorithms themselves usually differ between unsupervised and supervised learning.<br>
<b>A:</b>Supervised learning, we have our labels and we're trying to figure out what statistically indicates if something matches one label or another label. Unsupervised learning, we don't necessarily have those labels. That's the thing we're trying to discover. So reinforcement learning is another technique that we use sometimes. You can think about it like a turn in a game and you can play, you know, millions and millions of trials so that you're able to develop a system that by experimenting with reinforcement learning can eventually learn to play these games pretty successfully. Deep learning, which is essentially using neural networks and very large amounts of data to eventually iterate on a network structure that can make predictions.<br>
<b>B:</b>With reinforcement learning versus deep learning, it seems to me that reinforcement learning, is it sort of like the kitchen sink approach that you were talking about earlier, where you're just kind of trying everything?<br>
<b>A:</b>It is, but it also thrives in environments where you have a decision point, a pallet of actions to choose from. And it actually comes historically from trying to train a robot to navigate a room. If it bonks into this chair, it can't go forward anymore. And if it falls into that pit, you know, it's not going to succeed. But if it keeps exploring, it'll eventually get to the goal.<br>
<b>B:</b>Oh, like roombas?<br>
<b>A:</b>Yes.<br>
<b>B:</b>Oh, I didn't realize it was that deep, almost. Is there a situation which you'd want to use a deep learning algorithm over a reinforcement learning algorithm?<br>
<b>A:</b>So typically, you would choose deep learning if you have sufficient high quality data, hopefully labeled in a useful way. If you really are happy not to necessarily understand or be able to interpret what your system is doing or you're willing to invest in another set of work afterwards to understand what the system is doing once you've already trained it. And this also comes down to the fact that some things are actually really easy to solve with linear regression or simple statistical approaches. And some things are impossible.<br>
<b>B:</b>What would be the outcome if you were to choose the, quote-unquote, wrong approach?<br>
<b>A:</b>You build a system that could actually be useless. So years ago, I had a client that was a big telecom company and they had a data scientist who built a deep learning system to predict customer churn. It actually was very accurate, but it wasn't useful because nobody knew why the prediction was what it was. So they could say, you know, Sunny, you're likely to quit next month. But they had no idea what to do about it. And so, I think there are a bunch of failure modes.<br>
<b>B:</b>Would that be an example of, like, linear regression where the regression is accurate, but, you know, for marketing purposes, it's like, if you don't know why I'm quitting the service, then how can we fix this?<br>
<b>A:</b>Yeah. This is actually a good example of a very real world kind of machine learning problem where the solution to this was to build an interpretable system on top of the accurate predictions not to throw it away, but to do a bunch more work to figure out the why.<br>
<b>B:</b>How can we improve machine learning algorithms?<br>
<b>A:</b>It's actually fairly new that we're able to solve all of these problems and start to build these products and apply it in businesses and apply it, you know, everywhere. And so, we're still developing good practices and what it means to be a professional in machine learning. We're really developing a notion of what good looks like.